{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';import AuthService from'../services/auth.service';var accessToken=localStorage.getItem('accessToken');var user=JSON.parse(localStorage.getItem('user'));var initialState={accessToken:accessToken,user:user,isLoggedIn:Boolean(user),message:null};export var authSlice=createSlice({name:'auth',initialState:initialState,reducers:{registerSuccess:function registerSuccess(state){state.isLoggedIn=false;},registerFail:function registerFail(state){state.isLoggedIn=false;},loginSuccess:function loginSuccess(state,action){state.isLoggedIn=true;state.accessToken=action.payload;state.message=null;},loginFail:function loginFail(state,action){state.isLoggedIn=false;state.message=action.payload;},setUser:function setUser(state,action){state.user=action.payload;},logout:function logout(state){state.accessToken=null;state.isLoggedIn=false;state.user=null;state.message=null;}}});var _authSlice$actions=authSlice.actions,registerSuccess=_authSlice$actions.registerSuccess,registerFail=_authSlice$actions.registerFail,loginSuccess=_authSlice$actions.loginSuccess,loginFail=_authSlice$actions.loginFail,logout=_authSlice$actions.logout,setUser=_authSlice$actions.setUser;export{registerSuccess,registerFail,loginSuccess,loginFail,logout,setUser};export var login=function login(username,password){return function(dispatch){AuthService.login(username,password).then(function(data){dispatch(loginSuccess(data.accessToken));}).catch(function(error){var message=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();dispatch(loginFail(message));});};};export default authSlice.reducer;","map":{"version":3,"sources":["/home/gamurar/mastertoken/frontend/src/app/authSlice.ts"],"names":["createSlice","AuthService","accessToken","localStorage","getItem","user","JSON","parse","initialState","isLoggedIn","Boolean","message","authSlice","name","reducers","registerSuccess","state","registerFail","loginSuccess","action","payload","loginFail","setUser","logout","actions","login","username","password","dispatch","then","data","catch","error","response","toString","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA2C,kBAA3C,CAEA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CAQA,GAAMC,CAAAA,WAAW,CAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB,CACA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb,CACA,GAAMI,CAAAA,YAAuB,CAAG,CAC9BN,WAAW,CAAXA,WAD8B,CAE9BG,IAAI,CAAJA,IAF8B,CAG9BI,UAAU,CAAEC,OAAO,CAACL,IAAD,CAHW,CAI9BM,OAAO,CAAE,IAJqB,CAAhC,CAOA,MAAO,IAAMC,CAAAA,SAAS,CAAGZ,WAAW,CAAC,CACnCa,IAAI,CAAE,MAD6B,CAEnCL,YAAY,CAAZA,YAFmC,CAGnCM,QAAQ,CAAE,CACRC,eAAe,CAAE,yBAACC,KAAD,CAAW,CAC1BA,KAAK,CAACP,UAAN,CAAmB,KAAnB,CACD,CAHO,CAIRQ,YAAY,CAAE,sBAACD,KAAD,CAAW,CACvBA,KAAK,CAACP,UAAN,CAAmB,KAAnB,CACD,CANO,CAORS,YAAY,CAAE,sBAACF,KAAD,CAAQG,MAAR,CAA0C,CACtDH,KAAK,CAACP,UAAN,CAAmB,IAAnB,CACAO,KAAK,CAACd,WAAN,CAAoBiB,MAAM,CAACC,OAA3B,CACAJ,KAAK,CAACL,OAAN,CAAgB,IAAhB,CACD,CAXO,CAYRU,SAAS,CAAE,mBAACL,KAAD,CAAQG,MAAR,CAA0C,CACnDH,KAAK,CAACP,UAAN,CAAmB,KAAnB,CACAO,KAAK,CAACL,OAAN,CAAgBQ,MAAM,CAACC,OAAvB,CACD,CAfO,CAgBRE,OAAO,CAAE,iBAACN,KAAD,CAAQG,MAAR,CAAuC,CAC9CH,KAAK,CAACX,IAAN,CAAac,MAAM,CAACC,OAApB,CACD,CAlBO,CAmBRG,MAAM,CAAE,gBAACP,KAAD,CAAW,CACjBA,KAAK,CAACd,WAAN,CAAoB,IAApB,CACAc,KAAK,CAACP,UAAN,CAAmB,KAAnB,CACAO,KAAK,CAACX,IAAN,CAAa,IAAb,CACAW,KAAK,CAACL,OAAN,CAAgB,IAAhB,CACD,CAxBO,CAHyB,CAAD,CAA7B,CA+BA,uBAAoFC,SAAS,CAACY,OAA9F,CAAQT,eAAR,oBAAQA,eAAR,CAAyBE,YAAzB,oBAAyBA,YAAzB,CAAuCC,YAAvC,oBAAuCA,YAAvC,CAAqDG,SAArD,oBAAqDA,SAArD,CAAgEE,MAAhE,oBAAgEA,MAAhE,CAAwED,OAAxE,oBAAwEA,OAAxE,C,2EAEP,MAAO,IAAMG,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,QAAD,CAAmBC,QAAnB,QAAkD,UAACC,QAAD,CAAc,CACnF3B,WAAW,CAACwB,KAAZ,CAAkBC,QAAlB,CAA4BC,QAA5B,EACGE,IADH,CACQ,SAACC,IAAD,CAAU,CACdF,QAAQ,CAACV,YAAY,CAACY,IAAI,CAAC5B,WAAN,CAAb,CAAR,CACD,CAHH,EAIG6B,KAJH,CAIS,SAACC,KAAD,CAAW,CAChB,GAAMrB,CAAAA,OAAO,CACVqB,KAAK,CAACC,QAAN,EAAkBD,KAAK,CAACC,QAAN,CAAeH,IAAjC,EAAyCE,KAAK,CAACC,QAAN,CAAeH,IAAf,CAAoBnB,OAA9D,EAA0EqB,KAAK,CAACrB,OAAhF,EAA2FqB,KAAK,CAACE,QAAN,EAD7F,CAGAN,QAAQ,CAACP,SAAS,CAACV,OAAD,CAAV,CAAR,CACD,CATH,EAUD,CAXoB,EAAd,CAaP,cAAeC,CAAAA,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from './store';\nimport AuthService from '../services/auth.service';\n\ninterface authState {\n  isLoggedIn: boolean;\n  accessToken: string | null;\n  message: string | null;\n  user: any;\n}\nconst accessToken = localStorage.getItem('accessToken') as string;\nconst user = JSON.parse(localStorage.getItem('user') as string);\nconst initialState: authState = {\n  accessToken,\n  user,\n  isLoggedIn: Boolean(user),\n  message: null,\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    registerSuccess: (state) => {\n      state.isLoggedIn = false;\n    },\n    registerFail: (state) => {\n      state.isLoggedIn = false;\n    },\n    loginSuccess: (state, action: PayloadAction<string>) => {\n      state.isLoggedIn = true;\n      state.accessToken = action.payload;\n      state.message = null;\n    },\n    loginFail: (state, action: PayloadAction<string>) => {\n      state.isLoggedIn = false;\n      state.message = action.payload;\n    },\n    setUser: (state, action: PayloadAction<any>) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.accessToken = null;\n      state.isLoggedIn = false;\n      state.user = null;\n      state.message = null;\n    },\n  },\n});\n\nexport const { registerSuccess, registerFail, loginSuccess, loginFail, logout, setUser } = authSlice.actions;\n\nexport const login = (username: string, password: string): AppThunk => (dispatch) => {\n  AuthService.login(username, password)\n    .then((data) => {\n      dispatch(loginSuccess(data.accessToken));\n    })\n    .catch((error) => {\n      const message =\n        (error.response && error.response.data && error.response.data.message) || error.message || error.toString();\n\n      dispatch(loginFail(message));\n    });\n};\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}