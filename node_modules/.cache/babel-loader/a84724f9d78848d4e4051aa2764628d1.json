{"ast":null,"code":"var _jsxFileName = \"/home/gamurar/mastertoken/frontend/src/theme/index.tsx\";\nimport React from 'react';\nimport styled, { createGlobalStyle, css } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MEDIA_WIDTHS = {\n  upToExtraSmall: 500,\n  upToSmall: 720,\n  upToMedium: 960,\n  upToLarge: 1280\n};\nconst mediaWidthTemplates = Object.keys(MEDIA_WIDTHS).reduce((accumulator, size) => {\n  ;\n\n  accumulator[size] = (a, b, c) => css`\n      @media (max-width: ${MEDIA_WIDTHS[size]}px) {\n        ${css(a, b, c)}\n      }\n    `;\n\n  return accumulator;\n}, {});\nexport function colors() {\n  return {\n    white: '#FFFFFF',\n    black: '#292F30',\n    accentColor: '#1E2223',\n    'primary65': '#595959'\n  };\n}\nexport function theme() {\n  return { ...colors(),\n    grids: {\n      sm: 8,\n      md: 12,\n      lg: 24\n    },\n    //shadows\n    shadow1: '#2F80ED',\n    // media queries\n    mediaWidth: mediaWidthTemplates,\n    // css snippets\n    flexColumnNoWrap: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    flexRowNoWrap: css`\n      display: flex;\n      flex-flow: row nowrap;\n    `\n  };\n}\nconst TextWrapper = styled.span`\n  color: ${({\n  color,\n  theme\n}) => theme[color]};\n  font-size: ${({\n  fontSize\n}) => fontSize && `${fontSize}px`};\n  font-weight: ${({\n  fontWeight\n}) => fontWeight && `${fontWeight}`};\n  line-height: ${({\n  lineHeight\n}) => lineHeight && `${lineHeight}px`};\n`;\n_c = TextWrapper;\nexport const TYPE = {\n  H2(props) {\n    return /*#__PURE__*/_jsxDEV(TextWrapper, {\n      fontWeight: 700,\n      fontSize: 18,\n      lineHeight: 21,\n      color: 'white',\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  },\n\n  caption(props) {\n    return /*#__PURE__*/_jsxDEV(TextWrapper, {\n      fontWeight: 400,\n      fontSize: 14,\n      lineHeight: 16,\n      color: 'primary65',\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this);\n  }\n\n};\nexport const ThemedGlobalStyle = createGlobalStyle`\nhtml {\n  color: ${({\n  theme\n}) => theme.black};\n  background-color: ${({\n  theme\n}) => theme.white} !important;\n}\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextWrapper\");","map":{"version":3,"sources":["/home/gamurar/mastertoken/frontend/src/theme/index.tsx"],"names":["React","styled","createGlobalStyle","css","MEDIA_WIDTHS","upToExtraSmall","upToSmall","upToMedium","upToLarge","mediaWidthTemplates","Object","keys","reduce","accumulator","size","a","b","c","colors","white","black","accentColor","theme","grids","sm","md","lg","shadow1","mediaWidth","flexColumnNoWrap","flexRowNoWrap","TextWrapper","span","color","fontSize","fontWeight","lineHeight","TYPE","H2","props","caption","ThemedGlobalStyle"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport styled, {\n  createGlobalStyle,\n  css,\n  DefaultTheme,\n} from 'styled-components'\nimport { Colors } from './styled'\n\nexport const MEDIA_WIDTHS = {\n  upToExtraSmall: 500,\n  upToSmall: 720,\n  upToMedium: 960,\n  upToLarge: 1280,\n}\n\nconst mediaWidthTemplates: { [width in keyof typeof MEDIA_WIDTHS]: typeof css } = Object.keys(MEDIA_WIDTHS).reduce(\n  (accumulator, size) => {\n    ;(accumulator as any)[size] = (a: any, b: any, c: any) => css`\n      @media (max-width: ${(MEDIA_WIDTHS as any)[size]}px) {\n        ${css(a, b, c)}\n      }\n    `\n    return accumulator\n  },\n  {}\n) as any\n\nexport function colors(): Colors {\n  return {\n    white: '#FFFFFF',\n    black: '#292F30',\n    accentColor: '#1E2223',\n    'primary65': '#595959',\n  }\n}\n\nexport function theme(): DefaultTheme {\n  return {\n    ...colors(),\n\n    grids: {\n      sm: 8,\n      md: 12,\n      lg: 24,\n    },\n\n    //shadows\n    shadow1:  '#2F80ED',\n\n    // media queries\n    mediaWidth: mediaWidthTemplates,\n\n    // css snippets\n    flexColumnNoWrap: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    flexRowNoWrap: css`\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n  }\n}\n\nconst TextWrapper = styled.span<{ color: keyof Colors; fontWeight: number; fontSize: number; lineHeight: number }>`\n  color: ${({ color, theme }) => (theme as any)[color]};\n  font-size: ${({fontSize}) => fontSize && `${fontSize}px`};\n  font-weight: ${({fontWeight}) => fontWeight && `${fontWeight}`};\n  line-height: ${({lineHeight}) => lineHeight && `${lineHeight}px`};\n`\n\nexport const TYPE = {\n  H2(props: any) {\n    return <TextWrapper fontWeight={700} fontSize={18} lineHeight={21} color={'white'} {...props} />\n  },\n  caption(props: any) {\n    return <TextWrapper fontWeight={400} fontSize={14} lineHeight={16} color={'primary65'} {...props} />\n  },\n}\n\nexport const ThemedGlobalStyle = createGlobalStyle`\nhtml {\n  color: ${({ theme }) => theme.black};\n  background-color: ${({ theme }) => theme.white} !important;\n}\n`\n"]},"metadata":{},"sourceType":"module"}