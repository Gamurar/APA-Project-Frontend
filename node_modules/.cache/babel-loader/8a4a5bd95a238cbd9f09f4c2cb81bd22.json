{"ast":null,"code":"var _jsxFileName = \"/home/gamurar/APA/frontend/src/components/Views/Modals/AddString.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useModalOpen } from 'state/application/hooks';\nimport { ApplicationModal } from 'state/application/actions';\nimport styled from 'styled-components';\nimport { ReactComponent as CrossIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/svg/cross.svg\";\nimport { TYPE } from 'theme';\nimport { useToggleModal } from 'state/application/hooks';\nimport { Input, Button } from 'components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddStringModal = props => {\n  _s();\n\n  const isOpen = useModalOpen(ApplicationModal.ADD_STRING);\n  const toggleModal = useToggleModal(ApplicationModal.ADD_STRING);\n  const [error, setError] = useState(true);\n\n  const onUserInput = event => {\n    const value = event.target.value;\n\n    if (value === '') {\n      setError(true);\n    } else {\n      setError(false);\n    }\n  };\n\n  function sendAddStringReq(str) {\n    if (!str) {\n      return;\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        value: str\n      })\n    };\n    fetch('http://localhost:3001/add-string').then(res => res.json()).then(res => {\n      console.log(res.data);\n    }).catch(err => {\n      console.log(\"error: \", err);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isOpen && /*#__PURE__*/_jsxDEV(ModalOverlay, {\n      children: /*#__PURE__*/_jsxDEV(ModalContainer, {\n        children: [/*#__PURE__*/_jsxDEV(CrossIconStyled, {\n          onClick: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TYPE.H4, {\n          children: \"Add new string\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"name\",\n          onInput: onUserInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: error,\n          children: \"Add string\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(AddStringModal, \"ycs/ATD0CBrZQ+a0HNnpgsXEGHo=\", false, function () {\n  return [useModalOpen, useToggleModal];\n});\n\n_c = AddStringModal;\nconst CrossIconStyled = styled(CrossIcon)`\n  float: right;\n  margin-top: -5%;\n  margin-right: -5%;\n  cursor: pointer;\n`;\n_c2 = CrossIconStyled;\nconst ModalContainer = styled.div`\n  background-color: white;\n  width: 483px;\n  height: auto;\n  padding: 29px 31px 41px 31px;\n  box-sizing: border-box;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  margin: auto;\n  margin-top: 20vh;\n  border-radius: 4px;\n  text-align: left;\n`;\n_c3 = ModalContainer;\nconst ModalOverlay = styled.div`\n  position: absolute;\n  background-color: rgba(41, 47, 48, 0.7);\n  width: 100vw;\n  height: 100vh;\n  left: 0;\n  top: 0;\n`;\n_c4 = ModalOverlay;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"AddStringModal\");\n$RefreshReg$(_c2, \"CrossIconStyled\");\n$RefreshReg$(_c3, \"ModalContainer\");\n$RefreshReg$(_c4, \"ModalOverlay\");","map":{"version":3,"sources":["/home/gamurar/APA/frontend/src/components/Views/Modals/AddString.tsx"],"names":["React","useState","useModalOpen","ApplicationModal","styled","TYPE","useToggleModal","Input","Button","AddStringModal","props","isOpen","ADD_STRING","toggleModal","error","setError","onUserInput","event","value","target","sendAddStringReq","str","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","console","log","data","catch","err","CrossIconStyled","CrossIcon","ModalContainer","div","ModalOverlay"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,SAASC,IAAT,QAAqB,OAArB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,YAA9B;;;AAEA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAgB;AAAA;;AAC5C,QAAMC,MAAM,GAAGT,YAAY,CAACC,gBAAgB,CAACS,UAAlB,CAA3B;AACA,QAAMC,WAAW,GAAGP,cAAc,CAACH,gBAAgB,CAACS,UAAlB,CAAlC;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMe,WAAW,GAAIC,KAAD,IAAgB;AAClC,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;;AACA,QAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBH,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,GAPD;;AASA,WAASK,gBAAT,CAA0BC,GAA1B,EAAuC;AACrC,QAAI,CAACA,GAAL,EAAU;AACN;AACH;;AAED,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFY;AAGrBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,QAAAA,KAAK,EAAEG;AAAT,OAAf;AAHe,KAAvB;AAMAO,IAAAA,KAAK,CAAC,kCAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS;AACbE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACD,KAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBG,GAAvB;AACD,KAPH;AAQD;;AAGD,sBACE;AAAA,cACGzB,MAAM,iBACL,QAAC,YAAD;AAAA,6BACE,QAAC,cAAD;AAAA,gCACE,QAAC,eAAD;AAAiB,UAAA,OAAO,EAAEE;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CAAM,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,MAAxB;AAA+B,UAAA,OAAO,EAAEG;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEF,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ,mBADF;AAcD,CAlDM;;GAAML,c;UACIP,Y,EACKI,c;;;KAFTG,c;AAoDb,MAAM4B,eAAe,GAAGjC,MAAM,CAACkC,SAAD,CAAY;AAC1C;AACA;AACA;AACA;AACA,CALA;MAAMD,e;AAON,MAAME,cAAc,GAAGnC,MAAM,CAACoC,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;MAAMD,c;AAgBN,MAAME,YAAY,GAAGrC,MAAM,CAACoC,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMC,Y","sourcesContent":["import React, { useState } from 'react';\nimport { useModalOpen } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/actions'\nimport styled from 'styled-components'\nimport { ReactComponent as CrossIcon } from 'assets/svg/cross.svg'\nimport { TYPE } from 'theme'\nimport { useToggleModal } from 'state/application/hooks'\nimport { Input, Button } from 'components'\n\nexport const AddStringModal = (props: any) => {\n  const isOpen = useModalOpen(ApplicationModal.ADD_STRING)\n  const toggleModal = useToggleModal(ApplicationModal.ADD_STRING)\n  const [error, setError] = useState(true)\n\n  const onUserInput = (event: any) => {\n    const value = event.target.value;\n    if (value === '') {\n      setError(true)\n    } else {\n      setError(false)\n    }\n  }\n\n  function sendAddStringReq(str: string) {\n    if (!str) {\n        return;\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ value: str })\n    }\n\n    fetch('http://localhost:3001/add-string')\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res.data);\n      })\n      .catch((err) => {\n        console.log(\"error: \", err);\n      });\n  }\n\n\n  return (\n    <>\n      {isOpen && (\n        <ModalOverlay>\n          <ModalContainer>\n            <CrossIconStyled onClick={toggleModal}/>\n            <TYPE.H4>Add new string</TYPE.H4>\n            <Input type=\"text\" name=\"name\" onInput={onUserInput}/>\n            <Button disabled={error}>Add string</Button>\n          </ModalContainer>\n        </ModalOverlay>\n      )}\n    </>\n  )\n}\n\nconst CrossIconStyled = styled(CrossIcon)`\n  float: right;\n  margin-top: -5%;\n  margin-right: -5%;\n  cursor: pointer;\n`\n\nconst ModalContainer = styled.div`\n  background-color: white;\n  width: 483px;\n  height: auto;\n  padding: 29px 31px 41px 31px;\n  box-sizing: border-box;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  margin: auto;\n  margin-top: 20vh;\n  border-radius: 4px;\n  text-align: left;\n`\n\nconst ModalOverlay = styled.div`\n  position: absolute;\n  background-color: rgba(41, 47, 48, 0.7);\n  width: 100vw;\n  height: 100vh;\n  left: 0;\n  top: 0;\n`\n"]},"metadata":{},"sourceType":"module"}