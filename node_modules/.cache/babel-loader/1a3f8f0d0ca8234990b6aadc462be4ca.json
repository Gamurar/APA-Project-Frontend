{"ast":null,"code":"import _objectSpread from\"/home/gamurar/mastertoken/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/home/gamurar/mastertoken/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"component\",\"roles\"];import React from'react';import{Route,Redirect}from'react-router-dom';import{useSelector}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";var PrivateRoute=function PrivateRoute(_ref){var Component=_ref.component,roles=_ref.roles,rest=_objectWithoutProperties(_ref,_excluded);var _useSelector=useSelector(function(state){return state.auth;}),isLoggedIn=_useSelector.isLoggedIn,user=_useSelector.user;return/*#__PURE__*/_jsx(Route,_objectSpread(_objectSpread({},rest),{},{render:function render(props){if(!isLoggedIn){// not logged in so redirect to login page with the return url\nreturn/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/login',state:{from:props.location}}});}// check if route is restricted by role\nif(roles&&roles.indexOf(user.role)===-1){// role not authorized so redirect to home page\nreturn/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/'}});}// authorized so return component\nreturn/*#__PURE__*/_jsx(Component,_objectSpread({},props));}}));};export{PrivateRoute};","map":{"version":3,"sources":["/home/gamurar/mastertoken/frontend/src/components/Controllers/PrivateRoute/PrivateRoute.tsx"],"names":["React","Route","Redirect","useSelector","PrivateRoute","Component","component","roles","rest","state","auth","isLoggedIn","user","props","pathname","from","location","indexOf","role"],"mappings":"yWAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CACA,OAASC,KAAT,CAAgBC,QAAhB,KAAgC,kBAAhC,CACA,OAASC,WAAT,KAA4B,aAA5B,C,2CASA,GAAMC,CAAAA,YAAuB,CAAG,QAA1BA,CAAAA,YAA0B,MAA8C,IAAhCC,CAAAA,SAAgC,MAA3CC,SAA2C,CAArBC,KAAqB,MAArBA,KAAqB,CAAXC,IAAW,0CAC5E,iBAA6BL,WAAW,CAAC,SAACM,KAAD,QAAsBA,CAAAA,KAAK,CAACC,IAA5B,EAAD,CAAxC,CAAQC,UAAR,cAAQA,UAAR,CAAoBC,IAApB,cAAoBA,IAApB,CAEA,mBACE,KAAC,KAAD,gCACMJ,IADN,MAEE,MAAM,CAAE,gBAACK,KAAD,CAAW,CACjB,GAAI,CAACF,UAAL,CAAiB,CACf;AACA,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,CAAEG,QAAQ,CAAE,QAAZ,CAAsBL,KAAK,CAAE,CAAEM,IAAI,CAAEF,KAAK,CAACG,QAAd,CAA7B,CAAd,EAAP,CACD,CAED;AACA,GAAIT,KAAK,EAAIA,KAAK,CAACU,OAAN,CAAcL,IAAI,CAACM,IAAnB,IAA6B,CAAC,CAA3C,CAA8C,CAC5C;AACA,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,CAAEJ,QAAQ,CAAE,GAAZ,CAAd,EAAP,CACD,CAED;AACA,mBAAO,KAAC,SAAD,kBAAeD,KAAf,EAAP,CACD,CAhBH,GADF,CAoBD,CAvBD,CAyBA,OAAST,YAAT","sourcesContent":["import React, { FC } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../app/store';\n\ntype Props = {\n  component: React.JSXElementConstructor<any>;\n  path: string;\n  roles?: string[];\n};\n\nconst PrivateRoute: FC<Props> = ({ component: Component, roles, ...rest }) => {\n  const { isLoggedIn, user } = useSelector((state: RootState) => state.auth);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (!isLoggedIn) {\n          // not logged in so redirect to login page with the return url\n          return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />;\n        }\n\n        // check if route is restricted by role\n        if (roles && roles.indexOf(user.role) === -1) {\n          // role not authorized so redirect to home page\n          return <Redirect to={{ pathname: '/' }} />;\n        }\n\n        // authorized so return component\n        return <Component {...props} />;\n      }}\n    />\n  );\n};\n\nexport { PrivateRoute };\n"]},"metadata":{},"sourceType":"module"}