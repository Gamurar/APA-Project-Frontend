{"ast":null,"code":"var _jsxFileName = \"/home/gamurar/mastertoken/frontend/src/pages/Reset/Reset.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './Reset.css';\nimport React, { useState } from 'react';\nimport AuthService from '../../services/auth.service';\nimport BaseButton from '../../components/Views/Button/Button';\nimport styled from 'styled-components';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useLocation } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OTC_PARAM_NAME = 'otc';\n\nconst useQuery = () => {\n  _s();\n\n  return new URLSearchParams(useLocation().search);\n};\n\n_s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\nconst Schema = Yup.object().shape({\n  email: Yup.string().email().required('This field is required'),\n  password: Yup.string().required('This field is required'),\n  passwordConfirmation: Yup.string().when('password', {\n    is: val => !!(val && val.length > 0),\n    then: Yup.string().oneOf([Yup.ref('password')], 'Both passwords need to be the same')\n  })\n});\nconst Button = styled(BaseButton)`\n  font-size: 14px;\n  margin-left: auto;\n  &:hover,\n  &:focus {\n    border: 2px solid rgba(112, 76, 182, 0.4);\n  }\n\n  &:active {\n    background-color: rgba(112, 76, 182, 0.2);\n  }\n`;\n_c = Button;\n\nconst Reset = props => {\n  _s2();\n\n  const [loading, setLoading] = useState(false);\n  const query = useQuery();\n  const history = useHistory();\n\n  const handlePasswordChange = ({\n    email,\n    passwordConfirmation\n  }) => {\n    setLoading(true);\n    AuthService.resetPassword({\n      email: email,\n      password: passwordConfirmation,\n      otc: query.get(OTC_PARAM_NAME)\n    }).then(data => {\n      toast.success('Password was changes successfully!', {\n        onClose: () => {\n          history.push('/login', {});\n        }\n      });\n    }).catch(error => {\n      toast.error(`Failed to change your password: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login__header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header__title\",\n        children: \"Change your password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: '',\n        password: '',\n        passwordConfirmation: ''\n      },\n      validationSchema: Schema,\n      onSubmit: handlePasswordChange,\n      children: ({\n        isValid,\n        values,\n        errors,\n        handleSubmit,\n        handleChange,\n        handleBlur\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"login__form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__field\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"field__input\",\n              name: \"email\",\n              value: values.email,\n              placeholder: \"Email\",\n              onBlur: handleBlur,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"field__error\",\n              children: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__field\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"field__input\",\n              name: \"password\",\n              value: values.password,\n              placeholder: \"Password\",\n              onBlur: handleBlur,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"field__error\",\n              children: errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__field\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"field__input\",\n              name: \"passwordConfirmation\",\n              value: values.passwordConfirmation,\n              placeholder: \"Confirm password\",\n              onBlur: handleBlur,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"field__error\",\n              children: errors.passwordConfirmation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form__actions\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              disabled: loading || !isValid,\n              type: \"submit\",\n              children: loading ? /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"spinner-border spinner-border-sm\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Change password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: 'bottom-right',\n      autoClose: 7000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Reset, \"cWOozVJNXok656vBlj/Ncpq7QnA=\", false, function () {\n  return [useQuery, useHistory];\n});\n\n_c2 = Reset;\nexport default Reset;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Reset\");","map":{"version":3,"sources":["/home/gamurar/mastertoken/frontend/src/pages/Reset/Reset.tsx"],"names":["React","useState","AuthService","BaseButton","styled","Formik","Yup","ToastContainer","toast","useLocation","useHistory","OTC_PARAM_NAME","useQuery","URLSearchParams","search","Schema","object","shape","email","string","required","password","passwordConfirmation","when","is","val","length","then","oneOf","ref","Button","Reset","props","loading","setLoading","query","history","handlePasswordChange","resetPassword","otc","get","data","success","onClose","push","catch","error","message","finally","isValid","values","errors","handleSubmit","handleChange","handleBlur"],"mappings":"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","sourcesContent":["import './Reset.css';\nimport React, { useState } from 'react';\nimport AuthService from '../../services/auth.service';\nimport BaseButton from '../../components/Views/Button/Button';\nimport styled from 'styled-components';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useLocation } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\n\nconst OTC_PARAM_NAME = 'otc';\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nconst Schema = Yup.object().shape({\n  email: Yup.string().email().required('This field is required'),\n  password: Yup.string().required('This field is required'),\n  passwordConfirmation: Yup.string().when('password', {\n    is: (val: string) => !!(val && val.length > 0),\n    then: Yup.string().oneOf([Yup.ref('password')], 'Both passwords need to be the same'),\n  }),\n});\n\nconst Button = styled(BaseButton)`\n  font-size: 14px;\n  margin-left: auto;\n  &:hover,\n  &:focus {\n    border: 2px solid rgba(112, 76, 182, 0.4);\n  }\n\n  &:active {\n    background-color: rgba(112, 76, 182, 0.2);\n  }\n`;\n\nconst Reset = (props: any) => {\n  const [loading, setLoading] = useState(false);\n  const query = useQuery();\n  const history = useHistory();\n\n  const handlePasswordChange = ({ email, passwordConfirmation }: { email: string; passwordConfirmation: string }) => {\n    setLoading(true);\n\n    AuthService.resetPassword({ email: email, password: passwordConfirmation, otc: query.get(OTC_PARAM_NAME) })\n      .then((data) => {\n        toast.success('Password was changes successfully!', {\n          onClose: () => {\n            history.push('/login', {});\n          },\n        });\n      })\n      .catch((error) => {\n        toast.error(`Failed to change your password: ${error.message}`);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__header\">\n        <div className=\"header__title\">Change your password</div>\n      </div>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n          passwordConfirmation: '',\n        }}\n        validationSchema={Schema}\n        onSubmit={handlePasswordChange}\n      >\n        {({ isValid, values, errors, handleSubmit, handleChange, handleBlur }) => {\n          return (\n            <form onSubmit={handleSubmit} className=\"login__form\">\n              <div className=\"form__field\">\n                <input\n                  type=\"text\"\n                  className=\"field__input\"\n                  name=\"email\"\n                  value={values.email}\n                  placeholder=\"Email\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                />\n                <p className=\"field__error\">{errors.email}</p>\n              </div>\n\n              <div className=\"form__field\">\n                <input\n                  type=\"password\"\n                  className=\"field__input\"\n                  name=\"password\"\n                  value={values.password}\n                  placeholder=\"Password\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                />\n                <p className=\"field__error\">{errors.password}</p>\n              </div>\n\n              <div className=\"form__field\">\n                <input\n                  type=\"password\"\n                  className=\"field__input\"\n                  name=\"passwordConfirmation\"\n                  value={values.passwordConfirmation}\n                  placeholder=\"Confirm password\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                />\n                <p className=\"field__error\">{errors.passwordConfirmation}</p>\n              </div>\n\n              <div className=\"form__actions\">\n                <Button disabled={loading || !isValid} type=\"submit\">\n                  {loading ? (\n                    <span className=\"spinner-border spinner-border-sm\">Loading...</span>\n                  ) : (\n                    <span>Change password</span>\n                  )}\n                </Button>\n              </div>\n            </form>\n          );\n        }}\n      </Formik>\n      <ToastContainer position={'bottom-right'} autoClose={7000} />\n    </div>\n  );\n};\n\nexport default Reset;\n"]},"metadata":{},"sourceType":"module"}