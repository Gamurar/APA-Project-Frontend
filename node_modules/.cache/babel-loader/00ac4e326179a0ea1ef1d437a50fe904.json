{"ast":null,"code":"var _jsxFileName = \"/home/gamurar/mastertoken/frontend/src/components/Controllers/PrivateRoute/PrivateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  roles,\n  ...rest\n}) => {\n  _s();\n\n  const {\n    isLoggedIn,\n    user\n  } = useSelector(state => state.auth);\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      if (!isLoggedIn) {\n        // not logged in so redirect to login page with the return url\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: props.location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 18\n        }, this);\n      } // check if route is restricted by role\n\n\n      if (roles && roles.indexOf(user.role) === -1) {\n        // role not authorized so redirect to home page\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 18\n        }, this);\n      } // authorized so return component\n\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"PlHGE7bJBTTG3gp9g2UUWMwpBmE=\", false, function () {\n  return [useSelector];\n});\n\n_c = PrivateRoute;\nexport { PrivateRoute };\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/home/gamurar/mastertoken/frontend/src/components/Controllers/PrivateRoute/PrivateRoute.tsx"],"names":["React","Route","Redirect","useSelector","PrivateRoute","component","Component","roles","rest","isLoggedIn","user","state","auth","props","pathname","from","location","indexOf","role"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AASA,MAAMC,YAAuB,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,KAAxB;AAA+B,KAAGC;AAAlC,CAAD,KAA8C;AAAA;;AAC5E,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAuBP,WAAW,CAAEQ,KAAD,IAAsBA,KAAK,CAACC,IAA7B,CAAxC;AAEA,sBACE,QAAC,KAAD,OACMJ,IADN;AAEE,IAAA,MAAM,EAAGK,KAAD,IAAW;AACjB,UAAI,CAACJ,UAAL,EAAiB;AACf;AACA,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEK,YAAAA,QAAQ,EAAE,QAAZ;AAAsBH,YAAAA,KAAK,EAAE;AAAEI,cAAAA,IAAI,EAAEF,KAAK,CAACG;AAAd;AAA7B;AAAd;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAJgB,CAMjB;;;AACA,UAAIT,KAAK,IAAIA,KAAK,CAACU,OAAN,CAAcP,IAAI,CAACQ,IAAnB,MAA6B,CAAC,CAA3C,EAA8C;AAC5C;AACA,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEJ,YAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAVgB,CAYjB;;;AACA,0BAAO,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AAhBH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAvBD;;GAAMT,Y;UACyBD,W;;;KADzBC,Y;AAyBN,SAASA,YAAT","sourcesContent":["import React, { FC } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../app/store';\n\ntype Props = {\n  component: React.JSXElementConstructor<any>;\n  path: string;\n  roles?: string[];\n};\n\nconst PrivateRoute: FC<Props> = ({ component: Component, roles, ...rest }) => {\n  const { isLoggedIn, user } = useSelector((state: RootState) => state.auth);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (!isLoggedIn) {\n          // not logged in so redirect to login page with the return url\n          return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />;\n        }\n\n        // check if route is restricted by role\n        if (roles && roles.indexOf(user.role) === -1) {\n          // role not authorized so redirect to home page\n          return <Redirect to={{ pathname: '/' }} />;\n        }\n\n        // authorized so return component\n        return <Component {...props} />;\n      }}\n    />\n  );\n};\n\nexport { PrivateRoute };\n"]},"metadata":{},"sourceType":"module"}