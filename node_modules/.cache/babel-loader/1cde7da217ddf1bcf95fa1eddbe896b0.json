{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport AuthService from '../services/auth.service';\nconst accessToken = localStorage.getItem('accessToken');\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  accessToken,\n  user,\n  isLoggedIn: Boolean(user),\n  message: null\n};\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    registerSuccess: state => {\n      state.isLoggedIn = false;\n    },\n    registerFail: state => {\n      state.isLoggedIn = false;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoggedIn = true;\n      state.accessToken = action.payload;\n      state.message = null;\n    },\n    loginFail: (state, action) => {\n      state.isLoggedIn = false;\n      state.message = action.payload;\n    },\n    setUser: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.accessToken = null;\n      state.isLoggedIn = false;\n      state.user = null;\n      state.message = null;\n    }\n  }\n});\nexport const {\n  registerSuccess,\n  registerFail,\n  loginSuccess,\n  loginFail,\n  logout,\n  setUser\n} = authSlice.actions;\nexport const login = (username, password) => dispatch => {\n  AuthService.login(username, password).then(data => {\n    dispatch(loginSuccess(data.accessToken));\n  }).catch(error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch(loginFail(message));\n  });\n};\nexport default authSlice.reducer;","map":{"version":3,"sources":["/home/gamurar/mastertoken/react-boilerplate/src/app/authSlice.ts"],"names":["createSlice","AuthService","accessToken","localStorage","getItem","user","JSON","parse","initialState","isLoggedIn","Boolean","message","authSlice","name","reducers","registerSuccess","state","registerFail","loginSuccess","action","payload","loginFail","setUser","logout","actions","login","username","password","dispatch","then","data","catch","error","response","toString","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AAQA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,MAAMI,YAAuB,GAAG;AAC9BN,EAAAA,WAD8B;AAE9BG,EAAAA,IAF8B;AAG9BI,EAAAA,UAAU,EAAEC,OAAO,CAACL,IAAD,CAHW;AAI9BM,EAAAA,OAAO,EAAE;AAJqB,CAAhC;AAOA,OAAO,MAAMC,SAAS,GAAGZ,WAAW,CAAC;AACnCa,EAAAA,IAAI,EAAE,MAD6B;AAEnCL,EAAAA,YAFmC;AAGnCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAGC,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACP,UAAN,GAAmB,KAAnB;AACD,KAHO;AAIRQ,IAAAA,YAAY,EAAGD,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACP,UAAN,GAAmB,KAAnB;AACD,KANO;AAORS,IAAAA,YAAY,EAAE,CAACF,KAAD,EAAQG,MAAR,KAA0C;AACtDH,MAAAA,KAAK,CAACP,UAAN,GAAmB,IAAnB;AACAO,MAAAA,KAAK,CAACd,WAAN,GAAoBiB,MAAM,CAACC,OAA3B;AACAJ,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAXO;AAYRU,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAQG,MAAR,KAA0C;AACnDH,MAAAA,KAAK,CAACP,UAAN,GAAmB,KAAnB;AACAO,MAAAA,KAAK,CAACL,OAAN,GAAgBQ,MAAM,CAACC,OAAvB;AACD,KAfO;AAgBRE,IAAAA,OAAO,EAAE,CAACN,KAAD,EAAQG,MAAR,KAAuC;AAC9CH,MAAAA,KAAK,CAACX,IAAN,GAAac,MAAM,CAACC,OAApB;AACD,KAlBO;AAmBRG,IAAAA,MAAM,EAAGP,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACd,WAAN,GAAoB,IAApB;AACAc,MAAAA,KAAK,CAACP,UAAN,GAAmB,KAAnB;AACAO,MAAAA,KAAK,CAACX,IAAN,GAAa,IAAb;AACAW,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD;AAxBO;AAHyB,CAAD,CAA7B;AA+BP,OAAO,MAAM;AAAEI,EAAAA,eAAF;AAAmBE,EAAAA,YAAnB;AAAiCC,EAAAA,YAAjC;AAA+CG,EAAAA,SAA/C;AAA0DE,EAAAA,MAA1D;AAAkED,EAAAA;AAAlE,IAA8EV,SAAS,CAACY,OAA9F;AAEP,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KAAmDC,QAAD,IAAc;AACnF3B,EAAAA,WAAW,CAACwB,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EACGE,IADH,CACSC,IAAD,IAAU;AACdF,IAAAA,QAAQ,CAACV,YAAY,CAACY,IAAI,CAAC5B,WAAN,CAAb,CAAR;AACD,GAHH,EAIG6B,KAJH,CAIUC,KAAD,IAAW;AAChB,UAAMrB,OAAO,GACVqB,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeH,IAAjC,IAAyCE,KAAK,CAACC,QAAN,CAAeH,IAAf,CAAoBnB,OAA9D,IAA0EqB,KAAK,CAACrB,OAAhF,IAA2FqB,KAAK,CAACE,QAAN,EAD7F;AAGAN,IAAAA,QAAQ,CAACP,SAAS,CAACV,OAAD,CAAV,CAAR;AACD,GATH;AAUD,CAXM;AAaP,eAAeC,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from './store';\nimport AuthService from '../services/auth.service';\n\ninterface authState {\n  isLoggedIn: boolean;\n  accessToken: string | null;\n  message: string | null;\n  user: any;\n}\nconst accessToken = localStorage.getItem('accessToken') as string;\nconst user = JSON.parse(localStorage.getItem('user') as string);\nconst initialState: authState = {\n  accessToken,\n  user,\n  isLoggedIn: Boolean(user),\n  message: null,\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    registerSuccess: (state) => {\n      state.isLoggedIn = false;\n    },\n    registerFail: (state) => {\n      state.isLoggedIn = false;\n    },\n    loginSuccess: (state, action: PayloadAction<string>) => {\n      state.isLoggedIn = true;\n      state.accessToken = action.payload;\n      state.message = null;\n    },\n    loginFail: (state, action: PayloadAction<string>) => {\n      state.isLoggedIn = false;\n      state.message = action.payload;\n    },\n    setUser: (state, action: PayloadAction<any>) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.accessToken = null;\n      state.isLoggedIn = false;\n      state.user = null;\n      state.message = null;\n    },\n  },\n});\n\nexport const { registerSuccess, registerFail, loginSuccess, loginFail, logout, setUser } = authSlice.actions;\n\nexport const login = (username: string, password: string): AppThunk => (dispatch) => {\n  AuthService.login(username, password)\n    .then((data) => {\n      dispatch(loginSuccess(data.accessToken));\n    })\n    .catch((error) => {\n      const message =\n        (error.response && error.response.data && error.response.data.message) || error.message || error.toString();\n\n      dispatch(loginFail(message));\n    });\n};\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}